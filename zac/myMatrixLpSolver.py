#!/usr/bin/python

# Copyright 2016, Gurobi Optimization, Inc.

# This example formulates and solves the following simple QP model:
#
#    minimize    x + y + x^2 + x*y + y^2 + y*z + z^2
#    subject to  x + 2 y + 3 z >= 4
#                x +   y       >= 1
#
# The example illustrates the use of dense matrices to store A and Q
# (and dense vectors for the other relevant data).  We don't recommend
# that you use dense matrices, but this example may be helpful if you
# already have your data in this format.

import sys
from gurobipy import *

def lp_optimize(rows, cols, c, obj_sense, A, sense, rhs, lb, ub, vtype,
                   solution):

  model = Model()

  # Add variables to model
  for j in range(cols):
    model.addVar(lb=lb[j], ub=ub[j], vtype=vtype[j])
  model.update()
  vars = model.getVars()

  # Populate A matrix
  for i in range(rows):
    expr = LinExpr()
    for j in range(cols):
      if A[i][j] != 0:
        expr += A[i][j]*vars[j]
    model.addConstr(expr, sense[i], rhs[i])

  # Populate objective
  obj = QuadExpr()
#  for i in range(cols):
#    for j in range(cols):
#      if Q[i][j] != 0:
#        obj += Q[i][j]*vars[i]*vars[j]
  for j in range(cols):
    if c[j] != 0:
      obj += c[j]*vars[j]
  model.setObjective(obj, obj_sense)

  # Write model to a file
  model.update()
  model.write('autoGenerated.lp')

  # Solve
  model.optimize()

  print("Obj Value: ", model.objVal)
  for v in model.getVars():
    print(v.varName, v.x, "\n")

  # if model.status == GRB.Status.OPTIMAL:
  #   x = model.getAttr('x', vars)
  #   for i in range(cols):
  #     solution[i] = x[i]
  #   return True
  # else:
  #   return False


